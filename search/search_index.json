{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"AIOHCloud <p>AIOHCloud is an asynchronous python library for Hetzner Cloud API inspired from the hcloud-python project and complies with Hetzner Cloud API standards mentioned in its documentation.</p> <p>Key features of AIOHCloud are:</p> <ul> <li>It's fully type hinted and plays nicely with your IDE/Editor and preferred linters.</li> <li>Representing API types using Python objects to access their properties easily.</li> <li>Fully asynchronous operations via httpx framework.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>AIOHCloud requires you to have Python 3.8+ installed.</p> <p>It also uses the following external packages:</p> <ul> <li>httpx to send HTTP requests.</li> <li>attrs for creating API response models.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install AIOHCloud from PyPI using pip:</p> <pre><code>pip install aiohcloud\n</code></pre>"},{"location":"#simple-example","title":"Simple Example","text":"<p>Let's assume you have a Hetzner Cloud API token and want to get the recommended datacenter to create a server in.</p> <pre><code>from aiohcloud import Datacenters, HetznerCloud\n\nTOKEN = \"YOUR_TOKEN\"\nclient = HetznerCloud(token=TOKEN)\n\n\nasync def main() -&gt; None:\n    # `HetznerCloud.use` method creates and caches a handler object for your.\n    datacenters = client.use(Datacenters)\n    async for datacenter, recommended in datacenters.get_datacenters():\n        if datacenter.id == recommended:\n            print(f\"{datacenter.name!r} is recommended for you!\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the GPL-3.0 licence.</p> <p>\u2014 \u26a1 \u2014</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>The format used in this document is based on Keep a Changelog.</p>"},{"location":"CHANGELOG/#007-2023-01-07","title":"0.0.7 - (2023-01-07)","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Add <code>json</code> parameter to <code>HetznerCloud.request</code> method for sending JSON data to the API.</li> <li>Add utility function to validate labels.</li> <li>Add tests for label validator.</li> <li>Add PyPI version badge.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Change string representation of <code>HetznerCloud</code> instances by overriding <code>Representation.__repr_args__</code> method.</li> <li>Turn <code>Handler</code> class into an ABC.</li> <li>Change dependabot interval for python packages to <code>daily</code>.</li> <li>Get recommended datacenter before iterating datacenters list, #4 by @IHosseini083.</li> <li>Improve <code>HetznerCloud</code> class type hints</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Remove poetry pre-commit hook.</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Fix typo: <code>LABLES_</code> -&gt; <code>LABELS_</code>.</li> </ul>"},{"location":"CHANGELOG/#003-2022-12-05","title":"0.0.3 - (2022-12-05)","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Add <code>Datacenters</code> handler for <code>/datacenters</code> endpoint.</li> <li>Add a simple example to docs and remove <code>Usage</code> section from first page.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Make <code>Paginated[T]</code> type a lazy iterator object.</li> <li>Renamed <code>models</code> module to <code>types</code>.</li> <li>Change documentation domain name to <code>aiohcloud.iliya.dev</code>.</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Fix a typo: <code>alos</code> -&gt; <code>also</code></li> </ul>"},{"location":"CHANGELOG/#002-2022-12-02","title":"0.0.2 - (2022-12-02)","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Add base API client and models.</li> <li>Add handler for <code>/actions</code> endpoint.</li> <li>Add CNAME file to support a custom domain for docs.</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Update index page of docs and README.md file.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for being interested in contributing to AIOHCloud. There are many ways you can contribute to the project:</p> <ul> <li>Try AIOHCloud and report bugs/issues you find</li> <li>Implement new features</li> <li>Review Pull Requests of others</li> <li>Write documentation</li> </ul>"},{"location":"contributing/#reporting-bugs-or-other-issues","title":"Reporting Bugs or Other Issues","text":"<p>Try to be more descriptive as you can and in case of a bug report, provide as much information as possible, for example:</p> <ul> <li>OS platform</li> <li>Python version</li> <li>Installed dependencies and versions (<code>python -m pip freeze</code>)</li> <li>Code snippet</li> <li>Error traceback</li> </ul> <p>You should always try to reduce any examples to the simplest possible case that demonstrates the issue.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Prerequisites:</p> <ul> <li>Python version 3.8 or later.</li> <li>Poetry version 1.2.2 (or later) for dependency management. You should know basic stuff about handling dependencies using poetry command line interface.</li> </ul> <p>To start developing AIOHCloud, create a fork of the AIOHCloud repository on GitHub.</p> <p>Then clone your fork with the following command replacing <code>YOUR-USERNAME</code> with your GitHub username:</p> <pre><code>git clone https://github.com/YOUR-USERNAME/AIOHCloud\n</code></pre> <p>You can now install the project and its dependencies using:</p> <pre><code>cd AIOHCloud\n$ sudo chmod +x scripts/*\n$ scripts/install\n</code></pre> <p>Note: After installing all the dependencies, you need to run the bellow command to enable pre-commit:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/#testing-and-linting","title":"Testing and Linting","text":"<p>We use custom shell scripts to automate testing, linting, and documentation building workflow.</p> <p>To run the tests, use:</p> <pre><code>scripts/test\n</code></pre> <p>Any additional arguments will be passed to <code>pytest</code>. See the pytest documentation for more information.</p> <p>For example, to run a single test script:</p> <pre><code>scripts/test tests/test_application.py\n</code></pre> <p>To run the code auto-formatting:</p> <pre><code>scripts/lint\n</code></pre> <p>Lastly, to run code checks separately (they are also run as part of <code>scripts/test</code>), run:</p> <pre><code>scripts/check\n</code></pre>"},{"location":"contributing/#documenting","title":"Documenting","text":"<p>Documentation pages are located under the <code>docs/</code> folder.</p> <p>To run the documentation site locally (useful for previewing changes), use:</p> <pre><code>scripts/docs\n</code></pre>"},{"location":"contributing/#releasing","title":"Releasing","text":"<p>This section is targeted at AIOHCloud maintainers.</p> <p>Before releasing a new version, create a pull request that includes:</p> <ul> <li>An update to the changelog:</li> <li>We follow the format from keepachangelog.</li> <li>Compare <code>main</code> with the tag of the latest release, and list all entries that are of interest to our users:<ul> <li>Things that must go in the changelog: added, changed, deprecated or removed features, and bug fixes.</li> <li>Things that should not go in the changelog: changes to documentation, tests or tooling.</li> <li>Try sorting entries in descending order of impact / importance.</li> <li>Keep it concise and to-the-point. \ud83c\udfaf</li> </ul> </li> <li>A version bump: see <code>aiohcloud\\__init__.py</code>.</li> </ul> <p>Once the release PR is merged, create a new release including:</p> <ul> <li>Tag version like <code>v0.13.3</code>.</li> <li>Release title <code>Version 0.13.3</code></li> <li>Description copied from the changelog.</li> </ul> <p>Once created this release will be automatically uploaded to PyPI.</p> <p>      Partially taken from Starlette's contribution guidelines.      </p>"}]}